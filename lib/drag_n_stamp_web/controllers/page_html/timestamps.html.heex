<.flash_group flash={@flash} />
<div class="page">
  <div class="container">
    <div class="flex flex-between flex-center mb-2">
      <h1>YouTube Timestamps</h1>
      <button id="setup-btn" onclick="openSetupModal()" class="btn btn-small">
        Setup Bookmarklet
      </button>
      <div id="username-display" class="flex gap-1 flex-center hidden">
        <span id="username-text" class="text-small text-muted"></span>
        <button onclick="modifySetup()" class="btn-secondary btn-small">Modify</button>
      </div>
    </div>
    
<!-- URL Input Section -->
    <div class="card mb-2">
      <h3>Generate Timestamps</h3>
      <div class="flex gap-1">
        <input
          type="text"
          id="url-input"
          placeholder="Paste YouTube URL here..."
          class="flex-1"
          style="flex: 1"
        />
        <button onclick="generateFromURL()" class="btn" id="generate-btn">Generate</button>
      </div>
      <p class="text-small text-muted mb-0">
        Or use the bookmarklet below for one-click generation
      </p>
    </div>

    <div class="flex flex-between flex-center mb-2">
      <p class="text-muted mb-0"><span id="record-count">{length(@timestamps)}</span> records</p>
      <div class="flex gap-1">
        <select id="submitter-filter" onchange="applyFilters()">
          <option value="">All Submitters</option>
        </select>
        <select id="channel-filter" onchange="applyFilters()">
          <option value="">All Channels</option>
        </select>
        <select id="sort-select" onchange="applyFilters()">
          <option value="newest">Newest</option>
          <option value="oldest">Oldest</option>
        </select>
      </div>
    </div>

    <div class="card">
      <h3>Leaderboard</h3>
      <div class="flex flex-col gap-1">
        <%= for {submitter, count} <- submitter_stats(@timestamps) do %>
          <div class="flex flex-between flex-center">
            <span>{submitter}</span>
            <span class="text-small text-muted">{count}</span>
          </div>
        <% end %>
      </div>
    </div>

    <%= if @timestamps == [] do %>
      <div class="card text-center">
        <p>No timestamps yet.</p>
        <p class="text-small text-muted mb-0">Use bookmarklet on YouTube video.</p>
      </div>
    <% else %>
      <div id="timestamps-container">
        <%= for timestamp <- @timestamps do %>
          <div
            class="card timestamp-card"
            data-submitter={timestamp.submitter_username}
            data-channel={timestamp.channel_name}
            data-date={NaiveDateTime.to_iso8601(timestamp.inserted_at)}
          >
            <div class="flex gap-1 mb-2">
              <span class="tag">{timestamp.submitter_username}</span>
              <span class="tag">{timestamp.channel_name}</span>
              <span
                class="tag text-small timestamp-locale"
                data-timestamp={NaiveDateTime.to_iso8601(timestamp.inserted_at)}
              >
                {Calendar.strftime(timestamp.inserted_at, "%b %d, %Y %I:%M %p")}
              </span>
            </div>

            <div class="mb-2">
              <a href={timestamp.url} target="_blank" rel="noopener noreferrer" class="text-small">
                {timestamp.url}
              </a>
            </div>

            <div class=" !py-0 code">
              Generated Timestamps:<br />{timestamp.content}
            </div>
          </div>
        <% end %>
      </div>
    <% end %>
    
<!-- Setup Modal -->
    <div id="setup-modal" class="hidden modal-overlay">
      <div class="modal-content">
        <div class="flex flex-between flex-center mb-2">
          <h2>Setup Bookmarklet</h2>
          <button onclick="closeSetupModal()" class="btn-secondary btn-small">Close</button>
        </div>

        <div class="card" id="username-form">
          <h3>Set Username</h3>
          <p>Enter your username to track submissions:</p>
          <div class="flex gap-1">
            <input
              type="text"
              id="submitter-username"
              placeholder="Username"
              maxlength="50"
            />
            <button onclick="setUsername()" class="btn">Set</button>
          </div>
          <p class="text-small text-muted mb-0">Stored with all generated timestamps.</p>
        </div>

        <div class="card hidden" id="instructions">
          <h3>How to Use</h3>
          <ol>
            <li>Drag button to bookmarks bar</li>
            <li>Go to YouTube video</li>
            <li>Click bookmark tool in your bookmarks bar</li>
            <li>McDouglas creates some timestamps for you</li>
            <li>It may take a moment, you can close the status popup and continue watching</li>
          </ol>
        </div>

        <div class="text-center hidden" id="bookmarklet-section">
          <div class="mb-2">
            <a
              href={@bookmarklet_code}
              class="btn"
              draggable="true"
              onclick="return false;"
              style="cursor: grab;"
            >
              YouTube Timestamp Generator
            </a>
          </div>

          <p class="text-small text-muted mb-1">Drag to bookmarks bar</p>

          <div class="card mt-4">
            <p class="text-small mb-0">Drag button to bookmarks or copy code manually.</p>
            <p class="text-small mt-4 mx-auto text-muted mb-0">
              Current username: <strong id="current-username"></strong>
            </p>
            <button onclick="changeUsername()" class="btn-secondary btn-small">
              Change Username
            </button>
          </div>
        </div>

        <div class="card">
          <p class="text-small">Bookmarklet code:</p>
          <textarea
            id="bookmarklet-code"
            readonly
            class="code"
            style="height: 5rem; resize: none;"
          ><%= @bookmarklet_code %></textarea>

          <button onclick="copyBookmarklet()" class="btn-secondary btn-small">
            Copy Code
          </button>
        </div>

        <div class="card">
          <p class="text-small mb-0">
            <strong>Note:</strong>
            Works on YouTube videos only. Extracts channel info, defaults to "anonymous".
          </p>
        </div>

        <div class="card">
          <p class="text-small mb-0">
            <strong>Bookmarks bar:</strong>
            Ctrl+Shift+B (Cmd+Shift+B on Mac) or Settings → Appearance → Show bookmarks bar.
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Modal functions
  function openSetupModal() {
    // Don't open modal if username is already configured
    const savedUsername = localStorage.getItem('drag-n-stamp-username');
    if (savedUsername) {
      return; // Exit early, don't show modal
    }

    const modal = document.getElementById('setup-modal');
    modal.classList.remove('hidden');
    modal.style.display = 'flex';

    // Reset to initial state for new setup
    document.getElementById('username-form').classList.remove('hidden');
    document.getElementById('instructions').classList.add('hidden');
    document.getElementById('bookmarklet-section').classList.add('hidden');
  }

  // Allow users to modify their setup even with existing username
  function modifySetup() {
    const modal = document.getElementById('setup-modal');
    modal.classList.remove('hidden');
    modal.style.display = 'flex';

    const savedUsername = localStorage.getItem('drag-n-stamp-username');
    if (savedUsername) {
      // Pre-fill the username and show the bookmarklet section
      document.getElementById('submitter-username').value = savedUsername;
      document.getElementById('current-username').textContent = savedUsername;
      document.getElementById('username-form').classList.add('hidden');
      document.getElementById('instructions').classList.remove('hidden');
      document.getElementById('bookmarklet-section').classList.remove('hidden');
      updateBookmarkletWithUsername(savedUsername);
    } else {
      // Show setup form if somehow username was cleared
      document.getElementById('username-form').classList.remove('hidden');
      document.getElementById('instructions').classList.add('hidden');
      document.getElementById('bookmarklet-section').classList.add('hidden');
    }
  }

  // Allow users to change their username
  function changeUsername() {
    // Show the username form, hide the instructions
    document.getElementById('username-form').classList.remove('hidden');
    document.getElementById('instructions').classList.add('hidden');
    document.getElementById('bookmarklet-section').classList.add('hidden');

    // Pre-fill with current username
    const savedUsername = localStorage.getItem('drag-n-stamp-username');
    if (savedUsername) {
      document.getElementById('submitter-username').value = savedUsername;
    }
  }

  function closeSetupModal() {
    const modal = document.getElementById('setup-modal');
    modal.classList.add('hidden');
    modal.style.display = 'none';
  }

  function setUsername() {
    const usernameInput = document.getElementById('submitter-username');
    const username = usernameInput.value.trim();

    if (!username) {
      showCustomAlert('Username Required', 'Please enter username.', 'error');
      return;
    }

    // Save username to localStorage
    localStorage.setItem('drag-n-stamp-username', username);

    // Hide username form and show bookmarklet section
    document.getElementById('username-form').classList.add('hidden');
    document.getElementById('instructions').classList.remove('hidden');
    document.getElementById('bookmarklet-section').classList.remove('hidden');

    // Update bookmarklet code with the username
    updateBookmarkletWithUsername(username);

    // Update the current username display
    document.getElementById('current-username').textContent = username;

    // Update the main page display
    document.getElementById('username-text').textContent = `Setup complete (${username})`;

    showCustomAlert('Username Set', `Welcome ${username}! Use the bookmark tool below.`, 'success');
  }

  function updateBookmarkletWithUsername(submitterUsername) {
    const textarea = document.getElementById('bookmarklet-code');
    const bookmarkletLink = document.querySelector('a[draggable="true"]');

    // Get the current bookmarklet code and inject the submitter username
    let code = textarea.value;

    // Replace the username='anonymous' with the actual submitter username
    code = code.replace(
      /username:'anonymous'/g,
      `username:'anonymous'`
    );

    // Add submitter_username to the JSON payload
    code = code.replace(
      /body:JSON\.stringify\({([^}]+)}\)/,
      `body:JSON.stringify({$1,submitter_username:'${submitterUsername}'})`
    );

    textarea.value = code;
    bookmarkletLink.href = code;
  }

  function showCustomAlert(title, message, type) {
    const overlay = document.createElement('div');
    overlay.style.cssText = 'position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);z-index:999999;display:flex;align-items:center;justify-content:center;font-family:-apple-system,system-ui,sans-serif';

    const modal = document.createElement('div');
    modal.style.cssText = 'background:white;padding:24px;border:1px solid #ddd;max-width:400px;width:90%';

    const titleEl = document.createElement('h3');
    titleEl.style.cssText = 'margin:0 0 16px 0;font-size:18px;font-weight:600;color:#000';
    titleEl.textContent = title;

    const content = document.createElement('div');
    content.style.cssText = 'color:#555;line-height:1.5;margin-bottom:20px';
    content.textContent = message;

    const button = document.createElement('button');
    button.style.cssText = 'background:#000;color:white;border:none;padding:8px 16px;font-size:14px;cursor:pointer;float:right';
    button.textContent = 'OK';
    button.onclick = () => overlay.remove();

    modal.appendChild(titleEl);
    modal.appendChild(content);
    modal.appendChild(button);
    overlay.appendChild(modal);
    document.body.appendChild(overlay);

    overlay.onclick = (e) => {
      if (e.target === overlay) overlay.remove();
    };
  }

  function copyBookmarklet() {
    const textarea = document.getElementById('bookmarklet-code');
    textarea.select();
    textarea.setSelectionRange(0, 99999);
    navigator.clipboard.writeText(textarea.value).then(function() {
      showCustomAlert('Copied', 'Bookmarklet copied to clipboard.', 'success');
    }).catch(function() {
      showCustomAlert('Failed', 'Please copy manually.', 'error');
    });
  }

  function generateFromURL() {
    const urlInput = document.getElementById('url-input');
    const generateBtn = document.getElementById('generate-btn');
    const url = urlInput.value.trim();
    
    // Validate YouTube URL
    if (!url) {
      showCustomAlert('URL Required', 'Please enter a YouTube URL.', 'error');
      return;
    }
    
    const isYouTube = url.includes('youtube.com') || url.includes('youtu.be') || url.includes('m.youtube.com');
    if (!isYouTube) {
      showCustomAlert('Invalid URL', 'Please enter a valid YouTube URL.', 'error');
      return;
    }
    
    // Get username from localStorage or use anonymous
    const submitterUsername = localStorage.getItem('drag-n-stamp-username') || 'anonymous';
    
    // Disable button and show loading state
    generateBtn.disabled = true;
    generateBtn.textContent = 'Generating...';
    
    // Extract channel name if we're on YouTube page (won't work from our domain)
    const channelName = 'anonymous'; // Default since we can't extract from URL alone
    
    // Show loading message
    showCustomAlert('Processing...', 'Analyzing video and generating timestamps. This may take up to 5 minutes.', 'info');
    
    // Get the base URL
    const baseUrl = window.location.origin;
    const apiEndpoint = baseUrl + '/api/gemini';
    
    // Make the API request
    fetch(apiEndpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        url: url,
        channel_name: channelName,
        submitter_username: submitterUsername
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.status === 'success') {
        showCustomAlert('Success!', 'Timestamps generated successfully! Refreshing page...', 'success');
        // Refresh page after 2 seconds to show new timestamp
        setTimeout(() => {
          window.location.reload();
        }, 2000);
      } else {
        showCustomAlert('Error', data.message || 'Failed to generate timestamps.', 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showCustomAlert('Error', 'Failed to generate timestamps. Please try again.', 'error');
    })
    .finally(() => {
      // Re-enable button
      generateBtn.disabled = false;
      generateBtn.textContent = 'Generate';
      urlInput.value = '';
    });
  }
</script>

<script>
  // Initialize filters on page load
  window.addEventListener('DOMContentLoaded', function() {
    // Initialize existing username display code
    const savedUsername = localStorage.getItem('drag-n-stamp-username');

    if (savedUsername) {
      document.getElementById('setup-btn').classList.add('hidden');
      document.getElementById('username-text').textContent = `Setup complete (${savedUsername})`;
      document.getElementById('username-display').classList.remove('hidden');
    }

    const modal = document.getElementById('setup-modal');
    if (modal) {
      modal.style.display = 'none';
      modal.onclick = function(e) {
        if (e.target === this) closeSetupModal();
      }
    }

    // Format timestamps in user's locale
    formatTimestampsInLocale();

    // Initialize filter options
    initializeFilters();
  });

  function formatTimestampsInLocale() {
    const timestampElements = document.querySelectorAll('.timestamp-locale');
    
    timestampElements.forEach(element => {
      const isoString = element.dataset.timestamp;
      if (isoString) {
        try {
          // Parse the ISO string and format in user's locale
          const date = new Date(isoString + 'Z'); // Add Z to indicate UTC
          const options = {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: 'numeric',
            minute: '2-digit',
            hour12: true
          };
          
          const formattedDate = date.toLocaleDateString(undefined, options);
          element.textContent = formattedDate;
        } catch (error) {
          console.warn('Failed to format timestamp:', isoString, error);
          // Keep the server-rendered fallback if formatting fails
        }
      }
    });
  }

  function initializeFilters() {
    const cards = document.querySelectorAll('.timestamp-card');
    const submitters = new Set();
    const channels = new Set();

    cards.forEach(card => {
      const submitter = card.dataset.submitter;
      const channel = card.dataset.channel;
      if (submitter) submitters.add(submitter);
      if (channel) channels.add(channel);
    });

    // Populate submitter filter
    const submitterSelect = document.getElementById('submitter-filter');
    submitterSelect.innerHTML = '<option value="">All Submitters</option>';
    Array.from(submitters).sort().forEach(submitter => {
      const option = document.createElement('option');
      option.value = submitter;
      option.textContent = submitter;
      submitterSelect.appendChild(option);
    });

    // Populate channel filter
    const channelSelect = document.getElementById('channel-filter');
    channelSelect.innerHTML = '<option value="">All Channels</option>';
    Array.from(channels).sort().forEach(channel => {
      const option = document.createElement('option');
      option.value = channel;
      option.textContent = channel;
      channelSelect.appendChild(option);
    });
  }

  function applyFilters() {
    const submitterFilter = document.getElementById('submitter-filter').value;
    const channelFilter = document.getElementById('channel-filter').value;
    const sortSelect = document.getElementById('sort-select').value;
    const container = document.getElementById('timestamps-container');

    if (!container) return;

    const cards = Array.from(container.querySelectorAll('.timestamp-card'));

    // Filter cards
    const filteredCards = cards.filter(card => {
      const submitterMatch = !submitterFilter || card.dataset.submitter === submitterFilter;
      const channelMatch = !channelFilter || card.dataset.channel === channelFilter;
      return submitterMatch && channelMatch;
    });

    // Sort filtered cards
    filteredCards.sort((a, b) => {
      switch(sortSelect) {
        case 'newest':
          return new Date(b.dataset.date) - new Date(a.dataset.date);
        case 'oldest':
          return new Date(a.dataset.date) - new Date(b.dataset.date);
        case 'submitter':
          return a.dataset.submitter.localeCompare(b.dataset.submitter);
        case 'channel':
          return a.dataset.channel.localeCompare(b.dataset.channel);
        default:
          return 0;
      }
    });

    // Hide all cards first
    cards.forEach(card => card.style.display = 'none');

    // Show filtered and sorted cards
    filteredCards.forEach(card => {
      card.style.display = 'block';
      container.appendChild(card); // Re-append to maintain order
    });

    // Update record count
    const recordCount = document.getElementById('record-count');
    if (recordCount) {
      recordCount.textContent = filteredCards.length;
    }
  }
</script>
